package com.jiahua.db.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jiahua.db.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Version = new Property(1, Integer.class, "version", false, "VERSION");
        public final static Property Remark = new Property(2, String.class, "remark", false, "REMARK");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property RealName = new Property(4, String.class, "realName", false, "REAL_NAME");
        public final static Property Sex = new Property(5, Boolean.class, "sex", false, "SEX");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property Mobile = new Property(7, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Password = new Property(9, String.class, "password", false, "PASSWORD");
        public final static Property Identity = new Property(10, String.class, "identity", false, "IDENTITY");
        public final static Property Birthday = new Property(11, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property CreditScore = new Property(12, Integer.class, "creditScore", false, "CREDIT_SCORE");
        public final static Property OperationPersion = new Property(13, Integer.class, "operationPersion", false, "OPERATION_PERSION");
        public final static Property Status = new Property(14, Integer.class, "status", false, "STATUS");
        public final static Property CompanyId = new Property(15, Integer.class, "companyId", false, "COMPANY_ID");
        public final static Property CompanyName = new Property(16, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property IdentityUrl = new Property(17, String.class, "identityUrl", false, "IDENTITY_URL");
        public final static Property CardWork = new Property(18, String.class, "cardWork", false, "CARD_WORK");
        public final static Property Token = new Property(19, String.class, "token", false, "TOKEN");
        public final static Property Province = new Property(20, Integer.class, "province", false, "PROVINCE");
        public final static Property City = new Property(21, Integer.class, "city", false, "CITY");
        public final static Property Area = new Property(22, Integer.class, "area", false, "AREA");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VERSION\" INTEGER," + // 1: version
                "\"REMARK\" TEXT," + // 2: remark
                "\"NICK_NAME\" TEXT," + // 3: nickName
                "\"REAL_NAME\" TEXT," + // 4: realName
                "\"SEX\" INTEGER," + // 5: sex
                "\"AVATAR\" TEXT," + // 6: avatar
                "\"MOBILE\" TEXT NOT NULL ," + // 7: mobile
                "\"EMAIL\" TEXT," + // 8: email
                "\"PASSWORD\" TEXT," + // 9: password
                "\"IDENTITY\" TEXT," + // 10: identity
                "\"BIRTHDAY\" INTEGER," + // 11: birthday
                "\"CREDIT_SCORE\" INTEGER," + // 12: creditScore
                "\"OPERATION_PERSION\" INTEGER," + // 13: operationPersion
                "\"STATUS\" INTEGER," + // 14: status
                "\"COMPANY_ID\" INTEGER," + // 15: companyId
                "\"COMPANY_NAME\" TEXT," + // 16: companyName
                "\"IDENTITY_URL\" TEXT," + // 17: identityUrl
                "\"CARD_WORK\" TEXT," + // 18: cardWork
                "\"TOKEN\" TEXT," + // 19: token
                "\"PROVINCE\" INTEGER," + // 20: province
                "\"CITY\" INTEGER," + // 21: city
                "\"AREA\" INTEGER);"); // 22: area
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(2, version);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(5, realName);
        }
 
        Boolean sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(6, sex ? 1L: 0L);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
        stmt.bindString(8, entity.getMobile());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(10, password);
        }
 
        String identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindString(11, identity);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(12, birthday.getTime());
        }
 
        Integer creditScore = entity.getCreditScore();
        if (creditScore != null) {
            stmt.bindLong(13, creditScore);
        }
 
        Integer operationPersion = entity.getOperationPersion();
        if (operationPersion != null) {
            stmt.bindLong(14, operationPersion);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(15, status);
        }
 
        Integer companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindLong(16, companyId);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(17, companyName);
        }
 
        String identityUrl = entity.getIdentityUrl();
        if (identityUrl != null) {
            stmt.bindString(18, identityUrl);
        }
 
        String cardWork = entity.getCardWork();
        if (cardWork != null) {
            stmt.bindString(19, cardWork);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(20, token);
        }
 
        Integer province = entity.getProvince();
        if (province != null) {
            stmt.bindLong(21, province);
        }
 
        Integer city = entity.getCity();
        if (city != null) {
            stmt.bindLong(22, city);
        }
 
        Integer area = entity.getArea();
        if (area != null) {
            stmt.bindLong(23, area);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(2, version);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(5, realName);
        }
 
        Boolean sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(6, sex ? 1L: 0L);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
        stmt.bindString(8, entity.getMobile());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(10, password);
        }
 
        String identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindString(11, identity);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(12, birthday.getTime());
        }
 
        Integer creditScore = entity.getCreditScore();
        if (creditScore != null) {
            stmt.bindLong(13, creditScore);
        }
 
        Integer operationPersion = entity.getOperationPersion();
        if (operationPersion != null) {
            stmt.bindLong(14, operationPersion);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(15, status);
        }
 
        Integer companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindLong(16, companyId);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(17, companyName);
        }
 
        String identityUrl = entity.getIdentityUrl();
        if (identityUrl != null) {
            stmt.bindString(18, identityUrl);
        }
 
        String cardWork = entity.getCardWork();
        if (cardWork != null) {
            stmt.bindString(19, cardWork);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(20, token);
        }
 
        Integer province = entity.getProvince();
        if (province != null) {
            stmt.bindLong(21, province);
        }
 
        Integer city = entity.getCity();
        if (city != null) {
            stmt.bindLong(22, city);
        }
 
        Integer area = entity.getArea();
        if (area != null) {
            stmt.bindLong(23, area);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // version
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remark
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // realName
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.getString(offset + 7), // mobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // password
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // identity
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // birthday
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // creditScore
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // operationPersion
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // status
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // companyId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // companyName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // identityUrl
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // cardWork
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // token
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // province
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // city
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22) // area
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVersion(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRemark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobile(cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassword(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIdentity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBirthday(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setCreditScore(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setOperationPersion(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setStatus(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCompanyId(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCompanyName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIdentityUrl(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCardWork(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setToken(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setProvince(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setCity(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setArea(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
